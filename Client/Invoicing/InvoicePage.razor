@page "/invoices/new"
@page "/invoices/{Id:int}"
@using System.ComponentModel.DataAnnotations
@using Accounting.Client.Invoicing
@inject NavigationManager NavigationManager
@inject IInvoicesClient InvoicesClient
@inject ITransactionsClient TransactionsClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (invoice is not null)
{
    <PageTitle>Invoice #@Id</PageTitle>

    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true" Class="mt-4 mb-8">Invoice #@Id</MudText>

    <div class="mb-4">
        <MudButton StartIcon="@Icons.Filled.FileDownload" Link="@($"/invoices/invoices/{Id}/file")">Download document</MudButton>
    </div>

    <MudGrid Class="mb-4">
        <MudItem xs="12" sm="12" md="6" lg="3">
            @if (Status >= InvoiceStatus.Sent)
            {
                <MudField Label="Date">@Date?.ToString("yyyy-MM-dd")</MudField>
            }
            else
            {
                <MudDatePicker Label="Date" Date="Date" DateChanged="OnDateChanged" For="() => Date"></MudDatePicker>
            }
        </MudItem>

        <MudItem xs="12" sm="12" md="6" lg="3">
            <div class="d-flex">
                <MudField Label="Status">@Status</MudField>
                <MudIconButton Icon="@Icons.Filled.Edit" Class="justify-end"
                OnClick="async () => await UpdateInvoiceStatus()"></MudIconButton>
            </div>
        </MudItem>

        <MudItem xs="12" sm="12" md="6" lg="3">
            @if (Status >= InvoiceStatus.Sent)
            {
                <MudField Label="Due Date">@DueDate?.ToString("yyyy-MM-dd")</MudField>
            }
            else
            {
                <MudDatePicker Label="Due Date" Date="@DueDate" DateChanged="OnDueDateChanged" For="() => DueDate">
                </MudDatePicker>
            }
        </MudItem>

        <MudItem xs="12" sm="12" md="12">
            @if (Status >= InvoiceStatus.Sent)
            {
                <MudField Label="Reference">@Reference</MudField>
            }
            else
            {
                <MudTextField Label="Reference" Text="@Reference" TextChanged="OnReferenceChanged" For="() => Reference"></MudTextField>
            }
        </MudItem>

        <MudItem xs="12" sm="12" md="12">
            @if (Status >= InvoiceStatus.Sent)
            {
                <MudField Label="Note">@Note</MudField>
            }
            else
            {
                <MudTextField Label="Note" Text="@Note" TextChanged="OnNoteChanged" For="() => Note"></MudTextField>
            }      
        </MudItem>

        <MudItem xs="12" sm="12" md="12" lg="3">
           <MudField Label="Sub Total">@SubTotal.ToString("c")</MudField>  
        </MudItem>

        <MudItem xs="12" sm="12" md="12" lg="3">
           <MudField Label="VAT">@Vat.ToString("c")</MudField>
        </MudItem>

        <MudItem xs="12" sm="12" md="12" lg="3">
          <MudField Label="Total">@Total.ToString("c")</MudField>
        </MudItem>

    </MudGrid>

    <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true" Class="mt-8 mb-4">Items</MudText>

    @if (Status == InvoiceStatus.Draft)
    {
        <MudButton Variant="Variant.Filled" OnClick="AddItem" Class="mb-2">Add item</MudButton>
    }

    <MudTable T="InvoiceItemViewModel" @ref="table" Dense="true" Items="Items" Hover="true" Elevation="0"
        Breakpoint="Breakpoint.Sm" Loading="@loading" LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTh>Description</MudTh>
            <MudTh>Product Type</MudTh>
            <MudTh>Unit Price</MudTh>
            <MudTh>Unit</MudTh>
            <MudTh>VAT Rate</MudTh>
            <MudTh>VAT</MudTh>
            <MudTh>Total</MudTh>
            @if (Status == InvoiceStatus.Draft)
            {
                <MudTh></MudTh>
            }
        </HeaderContent>
        <RowTemplate Context="invoiceItem">
            <MudTd DataLabel="Description">@invoiceItem.Description</MudTd>
            <MudTd DataLabel="Product Type">@invoiceItem.ProductType</MudTd>
            <MudTd DataLabel="Unit Price">@invoiceItem.UnitPrice</MudTd>
            <MudTd DataLabel="Unit">@invoiceItem.Unit</MudTd>
            <MudTd DataLabel="VAT Rate">@(invoiceItem.VatRate * 100)%</MudTd>
            <MudTd DataLabel="VAT">@* *@</MudTd>
            <MudTd DataLabel="Line Total">@invoiceItem.LineTotal.ToString("c")</MudTd>
            @if (Status == InvoiceStatus.Draft)
            {
                <MudTd>
                    <MudIconButton Icon="@Icons.Filled.Delete" />
                </MudTd>
            }       
        </RowTemplate>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
    </MudTable>

    <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true" Class="mt-8 mb-4">Transactions</MudText>

    <MudTable T="TransactionDto" @ref="table2" ServerData="ServerReload" Hover="true" Elevation="0"
        Breakpoint="Breakpoint.Sm" Loading="@loading" LoadingProgressColor="Color.Info">
        <ToolBarContent>
            <MudSpacer />
            <MudSelect T="TransactionStatus?" Label="Status" MultiSelection="true" @bind-Value="Status2"
            SelectedValues="selectedStatuses" SelectedValuesChanged="OnSelectedValuesChanged" Class="mt-0">
                @foreach (var status in Enum.GetValues<TransactionStatus>())
                {
                    <MudSelectItem T="TransactionStatus?" Value="@status">@Enum.GetName(typeof(TransactionStatus), status)
                    </MudSelectItem>
                }
            </MudSelect>
        </ToolBarContent>

        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Date</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>From</MudTh>
            <MudTh>Reference</MudTh>
            <MudTh>Currency</MudTh>
            <MudTh>Amount</MudTh>
        </HeaderContent>
        <RowTemplate Context="transaction">
            <MudTd DataLabel="Id">@transaction.Id</MudTd>
            <MudTd DataLabel="Date">@transaction.Date?.ToString("g")</MudTd>
            <MudTd DataLabel="Status">@transaction.Status</MudTd>
            <MudTd DataLabel="From">@transaction.From</MudTd>
            <MudTd DataLabel="Reference">@transaction.Reference</MudTd>
            <MudTd DataLabel="Currency">@transaction.Currency</MudTd>
            <MudTd DataLabel="Amount">@transaction.Amount.ToString("c")</MudTd>
        </RowTemplate>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code
{
    InvoiceDto? invoice;
    MudTable<InvoiceItemViewModel> table;
    MudTable<TransactionDto> table2;
    bool loading = false;
    bool loading2 = false;
    TransactionStatus? Status2;
    HashSet<TransactionStatus?> selectedStatuses = new HashSet<TransactionStatus?>();

    [Parameter]
    public int? Id { get; set; }

    [Required]
    public DateTime? Date { get; set; }

    [Required]
    public TimeSpan? Time { get; set; }

    [Required]
    public InvoiceStatus Status { get; set; }

    public string? Reference { get; set; }

    public string? Note { get; set; }

    public DateTime? DueDate { get; set; }

    public List<InvoiceItemViewModel> Items { get; set; } = new List<InvoiceItemViewModel>();

    public decimal SubTotal => Items.Sum(i => i.SubTotal);

    public decimal Vat => Items.Sum(i => i.Vat);

    public decimal Total => Items.Sum(i => i.LineTotal);

    protected override async Task OnInitializedAsync()
    {
        if (Id is not null)
        {
            invoice = await InvoicesClient.GetInvoiceAsync(Id.GetValueOrDefault());

            Set(invoice);

            foreach (var item in invoice.Items)
            {
                Items.Add(new InvoiceItemViewModel
                {
                    ProductType = item.ProductType,
                    Description = item.Description,
                    UnitPrice = item.UnitPrice,
                    Unit = item.Unit,
                    Quantity = item.Quantity,
                    VatRate = item.VatRate,
                    // LineTotal = item.LineTotal
                });
            }
        }
        else
        {
            invoice = await InvoicesClient.CreateInvoiceAsync(
                new CreateInvoice()
                {
                    Status = InvoiceStatus.Draft
                }
            );

            Set(invoice);

            Snackbar.Add("Created invoice draft", Severity.Info);
        }
    }

    private void Set(InvoiceDto invoice) 
    {
        Id = invoice.Id;
        Status = invoice.Status;
        Date = invoice.Date.GetValueOrDefault().Date.Date;
        DueDate = invoice.DueDate.GetValueOrDefault().Date.Date;
        Reference = invoice.Reference;
        Note = invoice.Note;
    }

    private async Task Submit()
    {
        await Task.CompletedTask;
    }

    private async Task AddItem()
    {
        var model = new InvoiceItemViewModel();

        var dialogParameters = new DialogParameters();
        dialogParameters.Add(nameof(InvoiceItemDialog.Id), Id);
        dialogParameters.Add(nameof(InvoiceItemDialog.Model), model);

        var dialogRef = DialogService.Show<InvoiceItemDialog>("Item", dialogParameters);

        var result = await dialogRef.Result;

        if (result.Cancelled)
            return;

        var vm = (InvoiceItemViewModel)result.Data;

        var invoice = await InvoicesClient.AddItemAsync(
        Id.GetValueOrDefault(),
        vm.ProductType,
        vm.Description,
        vm.UnitPrice,
        vm.Unit,
        vm.VatRate,
        vm.Quantity
        );

        Items.Add(vm);
    }

    public async Task UpdateInvoiceStatus()
    {
        int invoiceId = Id.GetValueOrDefault();

        var dialogParameters = new DialogParameters();
        dialogParameters.Add(nameof(SetStatusDialog.InvoiceId), invoiceId);
        dialogParameters.Add(nameof(SetStatusDialog.Status), Status);

        var dialogRef = DialogService.Show<SetStatusDialog>("Update status", dialogParameters);

        var result = await dialogRef.Result;

        if (result.Cancelled) return;

        Status = (InvoiceStatus)result.Data;

        await table.ReloadServerData();
    }

    private async Task OnSelectedValuesChanged(HashSet<TransactionStatus?> selectedValues)
    {
        selectedStatuses = selectedValues;
        await table2.ReloadServerData();

        StateHasChanged();
    }

    private async Task<TableData<TransactionDto>> ServerReload(TableState state)
    {
        loading2 = true;

        try
        {
            var result = await TransactionsClient.GetTransactionsAsync(state.Page, state.PageSize, selectedStatuses.Select(s =>
            (TransactionStatus)s!), Id.GetValueOrDefault());

            return new TableData<TransactionDto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            loading2 = false;
        }
    }

    public async Task OnDateChanged(DateTime? date)
    {
        try
        {
            if (date != Date)
            {
                date = TimeZoneInfo.ConvertTimeToUtc(date.GetValueOrDefault(), TimeZoneInfo.Local);

                await InvoicesClient.SetDateAsync(Id.GetValueOrDefault(),
                date.GetValueOrDefault().ToUniversalTime());

                Date = date;
            }
        }
        catch (Exception)
        {
            Date = date;
        }
    }

    public async Task OnDueDateChanged(DateTime? date)
    {
        try
        {
            if (date != DueDate)
            {
                date = TimeZoneInfo.ConvertTimeToUtc(date.GetValueOrDefault(), TimeZoneInfo.Local);

                await InvoicesClient.SetDueDateAsync(Id.GetValueOrDefault(),
                date.GetValueOrDefault().ToUniversalTime());

                DueDate = date;
            }
        }
        catch (Exception)
        {

        }
    }

    public async Task OnReferenceChanged(string? reference)
    {
        if (reference != Reference)
        {
            await InvoicesClient.SetReferenceAsync(Id.GetValueOrDefault(), reference);
            Reference = reference;
        }
    }

    public async Task OnNoteChanged(string? note)
    {
        if (note != Note)
        {
            await InvoicesClient.SetNoteAsync(Id.GetValueOrDefault(), note);
            Note = note;
        }
    }
}